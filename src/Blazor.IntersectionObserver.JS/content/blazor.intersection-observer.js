!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.OBSERVER_ID_PREFIX="blazor_plugin_observer__";let t=1;const n=new Map;function r(r,o){null==o&&(o={});const i=function(e){let t=null;for(const[s,i]of n)if(r=e,o=i.options,r.root===o.root&&r.rootMargin===o.rootMargin&&r.threshold===o.threshold){t={id:s,instance:i};break}var r,o;return t}(o);if(null==i){const i=`${e.OBSERVER_ID_PREFIX}${t++}`,u=new IntersectionObserver((c=i,e=>{if(!n.has(c))return;const{dotnetRef:t,elements:r}=n.get(c),o=e.reduce((e,t)=>{for(const[n,o]of r)o.has(t.target)&&(e[n]=(e[n]||[]).concat(t));return e},{});Object.keys(o).forEach(e=>{const n=o[e];t.invokeMethodAsync("OnCallback",e,n.map(s))})}),o),l=new Map;return n.set(i,{dotnetRef:r,options:o,observer:u,elements:l}),{id:i,instance:n.get(i)}}var c;return i}function o(e,t){let r=!1;return 0===t.elements.size&&(t.observer.disconnect(),n.delete(e),r=!0),r}function s(e){function t(e){return{X:e.x,Y:e.y,Width:e.width,Height:e.height,Top:e.top,Left:e.left,Bottom:e.bottom,Right:e.right}}return{Target:e.target,IsIntersecting:e.isIntersecting,IntersectionRatio:e.intersectionRatio,Time:e.time,BoundingClientRect:t(e.boundingClientRect),IntersectionRect:t(e.intersectionRect),RootBounds:t(e.rootBounds)}}e.reset=function(){t=1,n.clear()},e.getObserverItems=function(){return n},e.create=function(e,t,n){const o=r(e,n),{instance:s}=o;return s.elements.set(t,new Set([])),o},e.observe=function(e,t,n,o){const{instance:s}=r(e,o);return function(e,t,n){const{elements:r,observer:o}=e,s=r.get(t);return null!=s?s.add(n):r.set(t,new Set([n])),o.observe(n),e}(s,t,n)},e.observeElement=function(e,t){const r=n.values();for(const n of r){const r=n.elements.get(e);if(null!=r&&!r.has(t)){n.observer.observe(t),r.add(t);break}}},e.unobserve=function(e,t){const r=n.values();let o=!1;for(const n of r){const r=n.elements.get(e);if(null!=r&&r.has(t)){n.observer.unobserve(t),r.delete(t),o=!0;break}}return o},e.disconnect=function(e){const t=n.entries();let r=!1;for(const[n,s]of t)if(s.elements.get(e)){s.elements.delete(e),o(n,s),r=!0;break}return r}}(r||(r={})),"undefined"!=typeof window&&(window.BlazorIntersectionObserverJS=r),t.default=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,