!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var o;!function(e){let t=1;const n=new Map;function o(e,t){return e.root===t.root&&e.rootMargin===t.rootMargin&&e.threshold===t.threshold}function r(e,r){null==r&&(r={});const i=function(e){let t=null;for(const[r,i]of n)if(o(e,i.options)){t={id:r,instance:i};break}return t}(r);if(null==i){const o=`blazor_plugin_observer__${t++}`,i=new IntersectionObserver(function(e){return t=>{if(!n.has(e))return;const{dotnetRef:o,elements:r}=n.get(e),i=t.reduce((e,t)=>{for(const[n,o]of r)o.has(t.target)&&(e[n]=(e[n]||[]).concat(t));return e},{});Object.keys(i).forEach(e=>{const t=i[e];o.invokeMethodAsync("OnCallback",e,t.map(s))})}}(o),r),c=new Map;return n.set(o,{dotnetRef:e,options:r,observer:i,elements:c}),{id:o,instance:n.get(o)}}return i}function i(e,t){let o=!1;return 0===t.elements.size&&(t.observer.disconnect(),n.delete(e),o=!0),o}function s(e){function t(e){return{X:e.x,Y:e.y,Width:e.width,Height:e.height,Top:e.top,Left:e.left,Bottom:e.bottom,Right:e.right}}return{Target:e.target,IsIntersecting:e.isIntersecting,IntersectionRatio:e.intersectionRatio,Time:e.time,BoundingClientRect:t(e.boundingClientRect),IntersectionRect:t(e.intersectionRect),RootBounds:t(e.rootBounds)}}e.create=function(e,t,n){const o=r(e,n),{instance:i}=o;return i.elements.set(t,new Set([])),o},e.observe=function(e,t,n,o){const{instance:i}=r(e,o);return function(e,t,n){const{elements:o,observer:r}=e,i=o.get(t);return null!=i?i.add(n):o.set(t,new Set([n])),r.observe(n),e}(i,t,n)},e.observeElement=function(e,t){const o=n.values();for(const n of o){const o=n.elements.get(e);if(null!=o&&!o.has(t)){n.observer.observe(t),o.add(t);break}}},e.unobserve=function(e,t){const o=n.values();let r=!1;for(const n of o){const o=n.elements.get(e);if(null!=o&&o.has(t)){n.observer.unobserve(t),o.delete(t),r=!0;break}}return r},e.disconnect=function(e){const t=n.entries();let o=!1;for(const[n,r]of t)if(r.elements.get(e)){r.elements.delete(e),i(n,r),o=!0;break}return o}}(o||(o={})),"undefined"!=typeof window&&(window.BlazorIntersectionObserverJS=o)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,